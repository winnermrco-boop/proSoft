#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

struct Point {
    int x, y;
    Point(int x = 0, int y = 0) : x(x), y(y) {}
    
    int distanceSquaredTo(const Point& other) const {
        return (x - other.x) * (x - other.x) + (y - other.y) * (y - other.y);
    }
};

int main() {
    // game loop
    while (1) {
        int ash_x, ash_y;
        cin >> ash_x >> ash_y; cin.ignore();
        Point ash(ash_x, ash_y);
        
        int human_count;
        cin >> human_count; cin.ignore();
        vector<Point> humans;
        for (int i = 0; i < human_count; i++) {
            int human_id, human_x, human_y;
            cin >> human_id >> human_x >> human_y; cin.ignore();
            humans.emplace_back(human_x, human_y);
        }
        
        int zombie_count;
        cin >> zombie_count; cin.ignore();
        vector<Point> zombies;
        for (int i = 0; i < zombie_count; i++) {
            int zombie_id, zombie_x, zombie_y, zombie_xnext, zombie_ynext;
            cin >> zombie_id >> zombie_x >> zombie_y >> zombie_xnext >> zombie_ynext; cin.ignore();
            zombies.emplace_back(zombie_x, zombie_y);
        }

        // Simple strategy: go to the closest zombie
        Point target = ash;
        int minDistSq = 16000 * 16000 + 9000 * 9000; // max possible distance squared
        
        for (const auto& zombie : zombies) {
            int distSq = ash.distanceSquaredTo(zombie);
            if (distSq < minDistSq) {
                minDistSq = distSq;
                target = zombie;
            }
        }

        cout << target.x << " " << target.y << endl;
    }
}
