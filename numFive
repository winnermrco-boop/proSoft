#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

bool isSafe(vector<string>& board, int row, int col) {
    int n = board.size();
    
    // Check row
    for (int i = 0; i < n; i++) {
        if (i != col && board[row][i] == 'Q') return false;
    }
    
    // Check column
    for (int i = 0; i < n; i++) {
        if (i != row && board[i][col] == 'Q') return false;
    }
    
    // Check diagonals
    for (int i = 1; i < n; i++) {
        if (row-i >= 0 && col-i >= 0 && board[row-i][col-i] == 'Q') return false;
        if (row-i >= 0 && col+i < n && board[row-i][col+i] == 'Q') return false;
        if (row+i < n && col-i >= 0 && board[row+i][col-i] == 'Q') return false;
        if (row+i < n && col+i < n && board[row+i][col+i] == 'Q') return false;
    }
    
    return true;
}

bool solve(vector<string>& board, int col) {
    int n = board.size();
    if (col >= n) return true;
    
    // Skip column if already has queen
    for (int i = 0; i < n; i++) {
        if (board[i][col] == 'Q') {
            return solve(board, col + 1);
        }
    }
    
    // Try placing queen in each row
    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 'Q';
            if (solve(board, col + 1)) return true;
            board[i][col] = '.';
        }
    }
    
    return false;
}

int main()
{
    vector<string> board(8);
    
    for (int i = 0; i < 8; i++) {
        string row;
        cin >> row; cin.ignore();
        board[i] = row;
    }
    
    solve(board, 0);
    
    for (int i = 0; i < 8; i++) {
        cout << board[i] << endl;
    }
}
